#include "keycodes.h"

//  https://keycombiner.com/collections/pycharm/

// Navigation
    #define PC_SEARCH_EVERYWHERE           LCTL(KC_N)
    #define PC_FIND                        LCTL(KC_F)
    #define PC_FIND_NEXT                   KC_F3
    #define PC_FIND_PREVIOUS               LSFT(KC_F3)
    #define PC_REPLACE                     LCTL(KC_R)
    #define PC_NAVIGATE_TO_CLASS           LCTL(KC_N)
    #define PC_NAVIGATE_TO_FILE            LSFT(LCTL(KC_N))
    #define PC_NAVIGATE_TO_SYMBOL          LALT(LSFT(LCTL(KC_N)))
    #define PC_RECENT_FILES_POPUP          LCTL(KC_E)
    #define PC_NAVIGATE_TO_LAST_EDIT       LSFT(LCTL(KC_BSPACE))
    #define PC_SHOW_USAGES                 LALT(LCTL(KC_F7))
    #define PC_NEXT_HIGHLIGHTED_ERROR      LCTL(KC_F2)
    #define PC_PREVIOUS_HIGHLIGHTED_ERROR  LSFT(LCTL(KC_F2))
    #define PC_FIND_ANY_ACTION             LSFT(LCTL(KC_A))
    #define PC_FIND_IN_PATH                LSFT(LCTL(KC_F))
    #define PC_FIND_WORD_AT_CARET          LCTL(KC_F3)
    #define PC_GO_TO_CLASS                 LCTL(KC_N)
    #define PC_GO_TO_FILE_MEMBER           LCTL(KC_F12)
    #define PC_NEXT_EDITOR_TAB             LALT(KC_RGHT)
    #define PC_PREVIOUS_EDITOR_TAB         LALT(KC_LEFT)
    #define PC_RECENTLY_VIEWED             LCTL(KC_E)
    #define PC_RECENT_LOCATIONS            LSFT(LCTL(KC_E))
    #define PC_NEXT_BOOKMARK               LCTL(LALT(KC_21))
    #define PC_PREV_BOOKMARK               LCTL(LALT(KC_20))


// Editing
    #define PC_DUPLICATE_LINE              LCTL(KC_D)
    #define PC_DELETE_LINE                 LCTL(KC_Y)
    #define PC_QUICK_FIX                   LALT(KC_ENTER)
    #define PC_LINE_COMMENT                LCTL(KC_SLASH)
    #define PC_BLOCK_COMMENT               LSFT(LCTL(KC_SLASH))
    #define PC_OPTIMIZE_IMPORTS            LALT(LCTL(KC_O))
    #define PC_REFORMAT_CODE               LALT(LCTL(KC_L))
    #define PC_START_NEW_LINE              LSFT(KC_ENTER)
    #define PC_SMART_LINE_JOIN             LCTL(LSFT(KC_J))
    #define PC_TOGGLE_CASE                 LSFT(LCTL(KC_U))
    #define PC_BASIC_COMPLETION            LCTL(KC_SPACE)
    #define PC_SMART_COMPLETION            LSFT(LCTL(KC_SPACE))
    #define PC_TYPE_NAME_COMPLETION        LALT(LCTL(KC_SPACE))
    #define PC_COMPLETE_STATEMENT          LSFT(LCTL(KC_ENTER))
    #define PC_PARAM_INFO_CONTEXT_INFO     LCTL(KC_P)
    #define PC_QUICK_DEFINITION            LSFT(LCTL(KC_I))
    #define PC_QUICK_DOCUMENTATION         LCTL(KC_Q)
    #define PC_EXTERNAL_DOCUMENTATION      LSFT(KC_F1)
    #define PC_GENERATE_CODE               LALT(KC_INSERT)
    #define PC_OVERRIDE_MEMBERS            LCTL(KC_O)
    #define PC_IMPLEMENT_MEMBERS           LCTL(KC_I)
    #define PC_SURROUND_WITH               LALT(LCTL(KC_T))
    #define PC_SHRINK_SELECTION            LSFT(LCTL(KC_W))
    #define PC_EXTEND_SELECTION            LCTL(KC_W)
    #define PC_AUTO_INDENT_LINES           LALT(LCTL(KC_I))
    #define PC_CUT                         LCTL(KC_X)
    #define PC_COPY                        LCTL(KC_C)
    #define PC_PASTE                       LCTL(KC_V)
    #define PC_COPY_DOCUMENT_PATH          LSFT(LCTL(KC_C))
    #define PC_PASTE_FROM_HISTORY          LSFT(LCTL(KC_V))
    #define PC_MOVE_LINE_UP                LSFT(LCTL(KC_UP))
    #define PC_MOVE_LINE_DOWN              LSFT(LCTL(KC_DOWN))
    #define PC_DELETE_LINE_AT_CARET        LCTL(KC_Y)
    #define PC_JOIN_LINES                  LSFT(LCTL(KC_J))
    #define PC_SPLIT_LINE                  LCTL(KC_ENTER)
    #define PC_START_NEW_LINE              LSFT(KC_ENTER)
    #define PC_TOGGLE_CASE                 LSFT(LCTL(KC_U))
    #define PC_EXPAND_CODE_BLOCK           LCTL(KC_KP_PLUS)
    #define PC_COLLAPSE_CODE_BLOCK         LCTL(KC_KP_MINUS)
    #define PC_EXPAND_ALL                  LSFT(LCTL(KC_KP_PLUS))
    #define PC_COLLAPSE_ALL                LSFT(LCTL(KC_KP_MINUS))
    #define PC_SAVE_ALL                    LCTL(KC_S)


// Debugging
    #define PC_RUN                         LSFT(KC_F10)
    #define PC_DEBUG                       LSFT(KC_F9)
    #define PC_RUN_CONTEXT                 LSFT(LCTL(KC_F10))
    #define PC_RUN_CHOOSE               LSFT(LALT(KC_F10))
    #define PC_DEBUG_CONTEXT               LSFT(LCTL(KC_F9))
    #define PC_DEBUG_CHOOSE               LSFT(LALT(KC_F9))
    #define PC_FORCE_STEP_OVER             A(S(KC_F8))
    #define PC_STEP_OVER                   KC_F8
    #define PC_SMART_STEP_INTO             S(KC_F7)
    #define PC_STEP_INTO_MY_CODE           A(S(KC_F7))
    #define PC_STEP_INTO                   KC_F7
    #define PC_STEP_OUT                    LSFT(KC_F8)
    #define PC_RUN_TO_CURSOR               LALT(KC_F9)
    #define PC_FORCE_RUN_TO_CURSOR         LALT(LCTL(KC_F19))
    #define PC_JUMP_TO_CURSOR              MEH(LCTL(KC_F19))
    #define PC_SHOW_EXECUTION_POINT        LALT(KC_F10)
    #define PC_EVALUATE_EXPRESSION         LALT(KC_F8)
    #define PC_QUICK_EVALUATE_EXPRESSION   LCTL(LALT(KC_F8))
    #define PC_PAUSE                       LCTL(KC_PAUSE)
    #define PC_STOP                        LCTL(KC_F2)
    #define PC_STOP_BACKGROUND_PROCESSES   LSFT(LCTL(KC_F2))
    #define PC_RESUME_PROGRAM              KC_F9
    #define PC_TOGGLE_BREAKPOINT           LCTL(KC_F8)
    #define PC_TOGGLE_TEMP_BREAKPOINT      MEH(KC_F8)
    #define PC_EDIT_BREAKPOINT             LSFT(LCTL(KC_F8))
    #define PC_DISABLE_BREAKPOINT          LCTL(KC_F18)
    #define PC_MUTE_BREAKPOINTS            LALT(LCTL(KC_F9))


// Refactoring
    #define PC_REFACTOR_THIS               LALT(LSFT(LCTL(KC_T)))
    #define PC_RENAME                      LSFT(LCTL(KC_F6))
    #define PC_EXTRACT_METHOD              LALT(LCTL(KC_M))
    #define PC_EXTRACT_VARIABLE            LCTL(LALT(KC_V))
    #define PC_INLINE                      LALT(LCTL(KC_N))
    #define PC_MOVE                        KC_F6
    #define PC_REFACTOR_COPY               LCTL(LALT(KC_C))
    #define PC_SAFE_DELETE                 LALT(LCTL(KC_DEL))
    #define PC_CHANGE_SIGNATURE            LCTL(LALT(KC_P))
    #define PC_INTRODUCE_FIELD             LCTL(LALT(KC_F))
    #define PC_INTRODUCE_CONSTANT          LCTL(LALT(KC_C))


// VersionControl
    #define PC_COMMIT                      LCTL(KC_K)
    #define PC_UPDATE_PROJECT              LCTL(KC_T)
    #define PC_PUSH_CHANGES                LCTL(LALT(KC_K))
    #define PC_SHOW_VCS_LOG                LCTL(LALT(KC_C))
    #define PC_SHOW_DIFF                   LCTL(LALT(KC_D))
    #define PC_RESOLVE_CONFLICTS           LALT(LCTL(KC_M))
    #define PC_ADD_TO_VCS                  LALT(LCTL(KC_A))
    #define PC_APPLY_CHANGES               LALT(LCTL(KC_U))
    #define PC_STASH_CHANGES               LALT(LCTL(KC_L))
    #define PC_UNSTASH_CHANGES             LALT(LCTL(KC_Q))
    #define PC_VCS_OPERATIONS_POPUP        LALT(KC_GRAVE)
    #define PC_RECENT_CHANGES              LALT(LSFT(KC_C))
    #define PC_REVERT                      LALT(LCTL(KC_Z))
    #define PC_NEXT_CHANGE                 LALT(LSFT(LCTL(KC_DOWN)))
    #define PC_PREVIOUS_CHANGE             LALT(LSFT(LCTL(KC_UP)))


//  IDEControl
    #define PC_OPEN_TOOL_WINDOW_COMMIT      LALT(KC_0)
    #define PC_OPEN_TOOL_WINDOW_PROJECT     LALT(KC_1)
    #define PC_OPEN_TOOL_WINDOW_BOOKMARKS   LALT(KC_2)
    #define PC_OPEN_TOOL_WINDOW_FIND        LALT(KC_3)
    #define PC_OPEN_TOOL_WINDOW_RUN         LALT(KC_4)
    #define PC_OPEN_TOOL_WINDOW_DEBUG       LALT(KC_5)
    #define PC_OPEN_TOOL_WINDOW_PROBLEMS    LALT(KC_6)
    #define PC_OPEN_TOOL_WINDOW_STRUCTURE   LALT(KC_7)
    #define PC_OPEN_TOOL_WINDOW_SERVICES    LALT(KC_8)
    #define PC_OPEN_TOOL_WINDOW_VCS         LALT(KC_9)
    #define PC_SYNCHRONIZE                  LALT(LCTL(KC_Y))
    #define PC_QUICK_SWITCH_SCHEME          LCTL(KC_GRAVE)
    #define PC_SETTINGS                     LALT(LCTL(KC_S))
    #define PC_JUMP_TO_SOURCE               KC_F4
    #define PC_NAVIGATION_BAR               LALT(KC_HOME)
    #define PC_JUMP_TO_LAST_TOOL_WINDOW     KC_F12
    #define PC_HIDE_ACTIVE_TOOL_WINDOW      LSFT(KC_ESC)
    #define PC_HIDE_ALL_TOOL_WINDOWS        LSFT(LCTL(KC_F12))
    #define PC_GO_TO_EDITOR                 KC_ESC
    #define PC_CLOSE_ACTIVE_TAB             LCTL(KC_W)
    #define PC_CLOSE_ACTIVE_WINDOW          LSFT(LCTL(KC_F4))

